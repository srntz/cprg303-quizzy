/* tslint:disable */
/* eslint-disable */
/**
 * Quiz App API
 * API specification for the Quiz Application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface LeaderboardsInner
 */
export interface LeaderboardsInner {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardsInner
     */
    'category'?: string;
    /**
     * 
     * @type {Array<LeaderboardsInnerTopPlayersInner>}
     * @memberof LeaderboardsInner
     */
    'top_players'?: Array<LeaderboardsInnerTopPlayersInner>;
}
/**
 * 
 * @export
 * @interface LeaderboardsInnerTopPlayersInner
 */
export interface LeaderboardsInnerTopPlayersInner {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardsInnerTopPlayersInner
     */
    'username'?: string;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardsInnerTopPlayersInner
     */
    'rank'?: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardsInnerTopPlayersInner
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof LoginResponse
     */
    'id'?: string;
    /**
     * The email of the user.
     * @type {string}
     * @memberof LoginResponse
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface QuestionsInner
 */
export interface QuestionsInner {
    /**
     * 
     * @type {string}
     * @memberof QuestionsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionsInner
     */
    'question_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionsInner
     */
    'question_text'?: string;
    /**
     * 
     * @type {Array<QuestionsInnerAnswersInner>}
     * @memberof QuestionsInner
     */
    'answers'?: Array<QuestionsInnerAnswersInner>;
}
/**
 * 
 * @export
 * @interface QuestionsInnerAnswersInner
 */
export interface QuestionsInnerAnswersInner {
    /**
     * 
     * @type {string}
     * @memberof QuestionsInnerAnswersInner
     */
    'option'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionsInnerAnswersInner
     */
    'is_correct'?: boolean;
}
/**
 * 
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'image_url'?: string;
    /**
     * 
     * @type {QuizCategory}
     * @memberof Quiz
     */
    'category'?: QuizCategory;
    /**
     * 
     * @type {number}
     * @memberof Quiz
     */
    'play_count'?: number;
    /**
     * 
     * @type {Array<QuizQuestionsInner>}
     * @memberof Quiz
     */
    'questions'?: Array<QuizQuestionsInner>;
}
/**
 * 
 * @export
 * @interface QuizCategory
 */
export interface QuizCategory {
    /**
     * 
     * @type {string}
     * @memberof QuizCategory
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizCategory
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface QuizQuestionsInner
 */
export interface QuizQuestionsInner {
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionsInner
     */
    'question_text'?: string;
    /**
     * 
     * @type {Array<QuestionsInnerAnswersInner>}
     * @memberof QuizQuestionsInner
     */
    'answers'?: Array<QuestionsInnerAnswersInner>;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserProfile
     */
    'id'?: string;
    /**
     * The username of the user.
     * @type {string}
     * @memberof UserProfile
     */
    'username'?: string;
    /**
     * URL of the user\'s avatar image.
     * @type {string}
     * @memberof UserProfile
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'country'?: string;
    /**
     * 
     * @type {Array<UserProfileQuizzesPlayedInner>}
     * @memberof UserProfile
     */
    'quizzes_played'?: Array<UserProfileQuizzesPlayedInner>;
}
/**
 * 
 * @export
 * @interface UserProfileQuizzesPlayedInner
 */
export interface UserProfileQuizzesPlayedInner {
    /**
     * 
     * @type {string}
     * @memberof UserProfileQuizzesPlayedInner
     */
    'quiz_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileQuizzesPlayedInner
     */
    'category_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileQuizzesPlayedInner
     */
    'completion_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileQuizzesPlayedInner
     */
    'total_score'?: number;
    /**
     * 
     * @type {Array<UserProfileQuizzesPlayedInnerScoreBreakdownInner>}
     * @memberof UserProfileQuizzesPlayedInner
     */
    'score_breakdown'?: Array<UserProfileQuizzesPlayedInnerScoreBreakdownInner>;
}
/**
 * 
 * @export
 * @interface UserProfileQuizzesPlayedInnerScoreBreakdownInner
 */
export interface UserProfileQuizzesPlayedInnerScoreBreakdownInner {
    /**
     * 
     * @type {string}
     * @memberof UserProfileQuizzesPlayedInnerScoreBreakdownInner
     */
    'question_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileQuizzesPlayedInnerScoreBreakdownInner
     */
    'score'?: number;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allow users to log in with their email.
         * @summary User Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginPost', 'loginRequest', loginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Allow users to log in with their email.
         * @summary User Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Allow users to log in with their email.
         * @summary User Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.loginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Allow users to log in with their email.
     * @summary User Login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LeaderboardsApi - axios parameter creator
 * @export
 */
export const LeaderboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve global leaderboards by quiz category.
         * @summary Get Global Leaderboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaderboardsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leaderboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaderboardsApi - functional programming interface
 * @export
 */
export const LeaderboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaderboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve global leaderboards by quiz category.
         * @summary Get Global Leaderboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaderboardsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeaderboardsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaderboardsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeaderboardsApi.leaderboardsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LeaderboardsApi - factory interface
 * @export
 */
export const LeaderboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaderboardsApiFp(configuration)
    return {
        /**
         * Retrieve global leaderboards by quiz category.
         * @summary Get Global Leaderboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaderboardsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<LeaderboardsInner>> {
            return localVarFp.leaderboardsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeaderboardsApi - object-oriented interface
 * @export
 * @class LeaderboardsApi
 * @extends {BaseAPI}
 */
export class LeaderboardsApi extends BaseAPI {
    /**
     * Retrieve global leaderboards by quiz category.
     * @summary Get Global Leaderboards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApi
     */
    public leaderboardsGet(options?: RawAxiosRequestConfig) {
        return LeaderboardsApiFp(this.configuration).leaderboardsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizApi - axios parameter creator
 * @export
 */
export const QuizApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of the most popular quizzes.
         * @summary Get Popular Quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        popularQuizzesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/popular-quizzes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve questions for a specific quiz category.
         * @summary Get Questions
         * @param {string} categoryId The ID of the category to retrieve questions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsGet: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('questionsGet', 'categoryId', categoryId)
            const localVarPath = `/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of available quiz categories.
         * @summary Get Quiz Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizCategoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quiz-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all quizzes for a specific category.
         * @summary Get Quizzes by Category
         * @param {string} categoryId The ID of the category to retrieve quizzes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizzesByCategoryGet: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('quizzesByCategoryGet', 'categoryId', categoryId)
            const localVarPath = `/quizzes-by-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizApi - functional programming interface
 * @export
 */
export const QuizApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of the most popular quizzes.
         * @summary Get Popular Quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async popularQuizzesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quiz>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.popularQuizzesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.popularQuizzesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve questions for a specific quiz category.
         * @summary Get Questions
         * @param {string} categoryId The ID of the category to retrieve questions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsGet(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.questionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of available quiz categories.
         * @summary Get Quiz Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizCategoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizCategoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all quizzes for a specific category.
         * @summary Get Quizzes by Category
         * @param {string} categoryId The ID of the category to retrieve quizzes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizzesByCategoryGet(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quiz>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizzesByCategoryGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizzesByCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizApi - factory interface
 * @export
 */
export const QuizApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizApiFp(configuration)
    return {
        /**
         * Retrieve a list of the most popular quizzes.
         * @summary Get Popular Quizzes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        popularQuizzesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Quiz>> {
            return localVarFp.popularQuizzesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve questions for a specific quiz category.
         * @summary Get Questions
         * @param {string} categoryId The ID of the category to retrieve questions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsGet(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<QuestionsInner>> {
            return localVarFp.questionsGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of available quiz categories.
         * @summary Get Quiz Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizCategoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuizCategory>> {
            return localVarFp.quizCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all quizzes for a specific category.
         * @summary Get Quizzes by Category
         * @param {string} categoryId The ID of the category to retrieve quizzes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizzesByCategoryGet(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Quiz>> {
            return localVarFp.quizzesByCategoryGet(categoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizApi - object-oriented interface
 * @export
 * @class QuizApi
 * @extends {BaseAPI}
 */
export class QuizApi extends BaseAPI {
    /**
     * Retrieve a list of the most popular quizzes.
     * @summary Get Popular Quizzes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public popularQuizzesGet(options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).popularQuizzesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve questions for a specific quiz category.
     * @summary Get Questions
     * @param {string} categoryId The ID of the category to retrieve questions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public questionsGet(categoryId: string, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).questionsGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of available quiz categories.
     * @summary Get Quiz Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizCategoriesGet(options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all quizzes for a specific category.
     * @summary Get Quizzes by Category
     * @param {string} categoryId The ID of the category to retrieve quizzes for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizzesByCategoryGet(categoryId: string, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizzesByCategoryGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve user profile details and their quiz history.
         * @summary Get User Profile
         * @param {string} userId The ID of the user whose profile is requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userProfileGet', 'userId', userId)
            const localVarPath = `/user-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve user profile details and their quiz history.
         * @summary Get User Profile
         * @param {string} userId The ID of the user whose profile is requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Retrieve user profile details and their quiz history.
         * @summary Get User Profile
         * @param {string} userId The ID of the user whose profile is requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserProfile> {
            return localVarFp.userProfileGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Retrieve user profile details and their quiz history.
     * @summary Get User Profile
     * @param {string} userId The ID of the user whose profile is requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userProfileGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userProfileGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



